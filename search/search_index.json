{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"Home"},{"location":"about.html","text":"About Us \u00b6 We are mobile developers, based in Paris, working with hybrid and cross platform technologies. Our goal is to help the client's business succeed, by solving their problems together using agile and lean, and developing the best product to satisfy the client's user needs. Learn more about us in our french website .","title":"About Us"},{"location":"about.html#about-us","text":"We are mobile developers, based in Paris, working with hybrid and cross platform technologies. Our goal is to help the client's business succeed, by solving their problems together using agile and lean, and developing the best product to satisfy the client's user needs. Learn more about us in our french website .","title":"About Us"},{"location":"api.html","text":"API \u00b6 The API has its own website. Please head to /api/ .","title":"API"},{"location":"api.html#api","text":"The API has its own website. Please head to /api/ .","title":"API"},{"location":"quickstart.html","text":"Quick Start \u00b6 State ids and event declaration \u00b6 Extend the StateId and the Event types. sealed class TrafficLightStateId : StateId { object RED : TrafficLightStateId () object YELLOW : TrafficLightStateId () object GREEN : TrafficLightStateId () } sealed class TrafficLightEvent : Event { object TIMER : TrafficLightEvent () object SHORT_TIMER : TrafficLightEvent () } sealed class PedestrianLightStateId : StateId { object WALK : PedestrianLightStateId () object WAIT : PedestrianLightStateId () } Transition between states \u00b6 val machine = createMachine { initial ( RED ) state ( RED ) { transition ( on = TIMER , target = GREEN ) } state ( GREEN ) { transition ( on = TIMER , target = YELLOW ) } state ( YELLOW ) { transition ( on = TIMER , target = RED ) } } machine . send ( TIMER ) assertEquals ( GREEN , machine . currentStateId ) Transition between nested states \u00b6 val machine = createMachine { initial ( RED ) state ( RED ) { initial ( WALK ) state ( WALK ) { transition ( on = SHORT_TIMER , target = WAIT ) } state ( WAIT ) } } machine . send ( SHORT_TIMER ) assertEquals ( listOf ( RED , WAIT ), machine . activeStateIds ()) Transition between nested state with the internal strategy \u00b6 With the internal strategy, all events are passed to children before they are passed to the compound state. val machine = createMachine ( strategy = KSStrategyType . Internal ) { initial ( RED ) state ( RED ) { transition ( on = TIMER , target = YELLOW ) initial ( WALK ) state ( WALK ) { transition ( on = TIMER , target = WAIT ) } state ( WAIT ) } state ( YELLOW ) } machine . send ( TIMER ) assertEquals ( listOf ( RED , WAIT ), machine . activeStateIds ()) Parallel state machine \u00b6 val machine = createMachine ( type = Type . Parallel ) { state ( TRAFFIC_LIGHT ) { initial ( RED ) state ( RED ) { transition ( on = TIMER , target = GREEN ) } state ( GREEN ) { transition ( on = TIMER , target = RED ) } } state ( PEDESTRIAN_LIGHT ) { initial ( WAIT ) state ( WAIT ) { transition ( on = TIMER , target = WALK ) } state ( WALK ) { transition ( on = TIMER , target = WAIT ) } } } machine . send ( TIMER ) assertEquals ( listOf ( TRAFFIC_LIGHT , GREEN , PEDESTRIAN_LIGHT , WALK ), machine . activeStateIds () ) Listen for transitions \u00b6 val machine = createMachine { initial ( RED ) state ( RED ) state ( YELLOW ) state ( GREEN ) } val listener = MachineTransitionListener { previousActiveStateIds , nextActiveStateIds -> print ( \"I'm listening.\" ) } machine . subscribe ( listener ) machine . unsubscribe ( listener ) // OR machine . onTransition { previousActiveStateIds , nextActiveStateIds -> print ( \"I'm listening.\" ) }","title":"Quick Start"},{"location":"quickstart.html#quick-start","text":"","title":"Quick Start"},{"location":"quickstart.html#state-ids-and-event-declaration","text":"Extend the StateId and the Event types. sealed class TrafficLightStateId : StateId { object RED : TrafficLightStateId () object YELLOW : TrafficLightStateId () object GREEN : TrafficLightStateId () } sealed class TrafficLightEvent : Event { object TIMER : TrafficLightEvent () object SHORT_TIMER : TrafficLightEvent () } sealed class PedestrianLightStateId : StateId { object WALK : PedestrianLightStateId () object WAIT : PedestrianLightStateId () }","title":"State ids and event declaration"},{"location":"quickstart.html#transition-between-states","text":"val machine = createMachine { initial ( RED ) state ( RED ) { transition ( on = TIMER , target = GREEN ) } state ( GREEN ) { transition ( on = TIMER , target = YELLOW ) } state ( YELLOW ) { transition ( on = TIMER , target = RED ) } } machine . send ( TIMER ) assertEquals ( GREEN , machine . currentStateId )","title":"Transition between states"},{"location":"quickstart.html#transition-between-nested-states","text":"val machine = createMachine { initial ( RED ) state ( RED ) { initial ( WALK ) state ( WALK ) { transition ( on = SHORT_TIMER , target = WAIT ) } state ( WAIT ) } } machine . send ( SHORT_TIMER ) assertEquals ( listOf ( RED , WAIT ), machine . activeStateIds ())","title":"Transition between nested states"},{"location":"quickstart.html#transition-between-nested-state-with-the-internal-strategy","text":"With the internal strategy, all events are passed to children before they are passed to the compound state. val machine = createMachine ( strategy = KSStrategyType . Internal ) { initial ( RED ) state ( RED ) { transition ( on = TIMER , target = YELLOW ) initial ( WALK ) state ( WALK ) { transition ( on = TIMER , target = WAIT ) } state ( WAIT ) } state ( YELLOW ) } machine . send ( TIMER ) assertEquals ( listOf ( RED , WAIT ), machine . activeStateIds ())","title":"Transition between nested state with the internal strategy"},{"location":"quickstart.html#parallel-state-machine","text":"val machine = createMachine ( type = Type . Parallel ) { state ( TRAFFIC_LIGHT ) { initial ( RED ) state ( RED ) { transition ( on = TIMER , target = GREEN ) } state ( GREEN ) { transition ( on = TIMER , target = RED ) } } state ( PEDESTRIAN_LIGHT ) { initial ( WAIT ) state ( WAIT ) { transition ( on = TIMER , target = WALK ) } state ( WALK ) { transition ( on = TIMER , target = WAIT ) } } } machine . send ( TIMER ) assertEquals ( listOf ( TRAFFIC_LIGHT , GREEN , PEDESTRIAN_LIGHT , WALK ), machine . activeStateIds () )","title":"Parallel state machine"},{"location":"quickstart.html#listen-for-transitions","text":"val machine = createMachine { initial ( RED ) state ( RED ) state ( YELLOW ) state ( GREEN ) } val listener = MachineTransitionListener { previousActiveStateIds , nextActiveStateIds -> print ( \"I'm listening.\" ) } machine . subscribe ( listener ) machine . unsubscribe ( listener ) // OR machine . onTransition { previousActiveStateIds , nextActiveStateIds -> print ( \"I'm listening.\" ) }","title":"Listen for transitions"},{"location":"guides/index.html","text":"Guides \u00b6","title":"Guides"},{"location":"guides/index.html#guides","text":"","title":"Guides"}]}